snippet min "specifiy a minimum required version" b
CMAKE_MINIMUM_REQUIRED(VERSION ${1:2.8.2})$0
endsnippet

snippet proj "specifiy a name for the project" b
PROJECT(${1:Name})$0
endsnippet

snippet compile_commands "dump compile commands for YCM" b
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

IF(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json")
	EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E copy_if_different
		"${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json"
		"${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json"
	)
ENDIF()
endsnippet

snippet find
FIND_PACKAGE(${1:library} ${2:REQUIRED})$0
endsnippet

snippet include "location of include files" b
INCLUDE_DIRECTORIES(${${1:include_dir}})$0
endsnippet

snippet glob "expand glob and store into variable" b
FILE(GLOB ${1:srcs} *.${2:cpp})$0
endsnippet

snippet subdir "location of src files" b
ADD_SUBDIRECTORY(${1:src})$0
endsnippet

snippet lib "create/add a library" b
ADD_LIBRARY(${1:lib}
	${2:srcs}
)$0
endsnippet

snippet link "link libraries" b
TARGET_LINK_LIBRARIES(${1:bin} ${2:somelib})$0
endsnippet

snippet exec "create/add a executable" b
ADD_EXECUTABLE(${1:bin}
	${2:srcs}
)$0
endsnippet

snippet set "set a variable" b
SET(${1:var} ${2:val})$0
endsnippet

snippet dep "add dependencies" b
ADD_DEPENDENCIES(${1:target}
	${2:dep}
)$0

snippet Ext_url
INCLUDE(ExternalProject)
ExternalProject_Add(${1:googletest}
	URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
	URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
	SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
	BINARY_DIR "${5:${CMAKE_BINARY_DIR}/gtest-build}"
	CONFIGURE_COMMAND ""
	BUILD_COMMAND     ""
	INSTALL_COMMAND   ""
	TEST_COMMAND      ""
)$0
endsnippet

snippet Ext_git
INCLUDE(ExternalProject)
ExternalProject_Add(${1:googletest}
	GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}
	GIT_TAG           ${3:master}
	SOURCE_DIR        "${4:${CMAKE_BINARY_DIR}/googletest-src}"
	BINARY_DIR        "${5:${CMAKE_BINARY_DIR}/googletest-build}"
	CONFIGURE_COMMAND ""
	BUILD_COMMAND     ""
	INSTALL_COMMAND   ""
	TEST_COMMAND      ""
)$0
endsnippet

snippet props "set property for a specified target" b
SET_TARGET_PROPERTIES(${1:target}
	${2:properties} ${3:compile_flags}
	${4:"-O3 -Wall -pedantic"}
)$0
endsnippet

snippet test "add a test" b
ADD_TEST(${1:ATestName} ${2:testCommand --options})$0
endsnippet
